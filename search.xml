<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[c语言复习]]></title>
      <url>https://ptbws.github.io/2017/02/22/c%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="几个面试中遇到的问题："><a href="#几个面试中遇到的问题：" class="headerlink" title="几个面试中遇到的问题："></a>几个面试中遇到的问题：</h1><h2 id="malloc-和calloc（）的区别是什么？"><a href="#malloc-和calloc（）的区别是什么？" class="headerlink" title="malloc()和calloc（）的区别是什么？"></a>malloc()和calloc（）的区别是什么？</h2><blockquote>
<ul>
<li><p>刚问了cplusplus.com.总结一下区别: void* malloc(size_t size):前面的void*看起来不眼熟，但只要把void换成int,就知道怎么回事了。int*表示指向int型数据的指针 ，也就是地址；同理，void*则表示指向一个地址，但是这个数据的类型可以是任何数据类型。malloc(size_t size)函数入口参数是分配的空间大小，确切说是分配的byte数量，因此这个空间存储什么数据类型必须明确告诉malloc,例如：<a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>* buffer = (<span class="keyword">char</span>*) <span class="built_in">malloc</span> (i);<span class="comment">//i表示byte数量</span></div></pre></td></tr></table></figure>
</li>
<li><p>在上面malloc()前面的(char*)，如何理解？参考了网络文章，发现是强制类型转换，具体说，就是把malloc返回的void*强制转换成指向char的指针，也就是说void*可以被强制类型转换成其他类型。</p>
</li>
<li><p>类似的，calloc()语法是：<br>void* calloc (size_t num, size_t size); 和malloc不同的是，calloc有两个入口参数，一个表示分配空间存的元素的个数，注意不是byte的个数，这两个是有区别，另一个表示存的元素占用的byte数。例如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>* pData = (<span class="keyword">int</span>*) <span class="built_in">calloc</span> (i,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="comment">//(int*)强制类型转换</span></div></pre></td></tr></table></figure>
</li>
<li><p>cplusplus就是写得透彻。这<strong>两者的区别</strong>一句话就说明白：malloc以字母m开头，表示的是从memory角度来看这个分配，memory是不分别数据类型的，一律用byte的数量表示memory分配大小，所以malloc一个入口函数就够了，毕竟底层器件能看到的世界和上层不同；calloc：就是contiguous allocation,为什么叫连续分配？因为他是从c语言的角度，而不是从存储器角度，来分配的。从c语言，如果我现在要存100个int，和存100个char，相同的是都要分配100个空间，不同的是每个空间大小不一样。所以，连续分配是指连续分配n个size相同的空间，每个空间的size需要单独指定。</p>
</li>
<li>两种区别一句话表示为：malloc is to allocate memory block; calloc is to allocate and zero-initialize array.</li>
<li>由于是动态内存管理，分配使用后，必须手动释放，所有上面两种分配都需要free(指针)</li>
</ul>
</blockquote>
<h2 id="short-int-long都是几个byte表示的在32位系统中？由于不同系统对同一个数据类型，比如long，定义是不一样，-如何保证代码的可移植性呢？"><a href="#short-int-long都是几个byte表示的在32位系统中？由于不同系统对同一个数据类型，比如long，定义是不一样，-如何保证代码的可移植性呢？" class="headerlink" title="short,int,long都是几个byte表示的在32位系统中？由于不同系统对同一个数据类型，比如long，定义是不一样， 如何保证代码的可移植性呢？"></a>short,int,long都是几个byte表示的在32位系统中？由于不同系统对同一个数据类型，比如long，定义是不一样， 如何保证代码的可移植性呢？</h2><blockquote>
<ul>
<li>short表示2 byte, int 4 byte, long 8byte.为了移植，用typedef 来自己重命名类型,例如： typedef int int16，把int命名成int16,如果移植到32位系统，那么只需要修改typedef的定义即可，不用全部替换，例如：typedef short int16</li>
</ul>
</blockquote>
<h2 id="include-和include-“header-h”区别是什么？"><a href="#include-和include-“header-h”区别是什么？" class="headerlink" title="include 和include “header.h”区别是什么？"></a>include <header.h>和include “header.h”区别是什么？</header.h></h2><blockquote>
<ul>
<li>&lt;&gt;表示编译器首先去标准库里搜索这个头文件；“”表示是用户自定义的头文件，因此去当前目录查找</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 找工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面试总结-2/21/2017]]></title>
      <url>https://ptbws.github.io/2017/02/22/%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>今天面试，面试前让看了一本gps书，看得很仔细的那种，自己还写了17页的pdf读书笔记，把书上的方法几乎都搞清楚了，就信心满满的去了，去了发现要现场做题，给了一页纸，就让作答，一看发现有一半不是书上的题，还有两个很开放的题，突然觉得这几天书白看了，自己看这么仔细，去了发现考的书上的知识都是很基本的，完全没必要看这么仔细。</p>
<p>当然看书也不亏，无意发现自己还可以喜欢看技术书，更发现一边看书一边写下自己的理解是一件很愉快的事。把一本厚厚的书按照自己的语言和习惯重新“写”一遍，这本书就不简单是原来那本书了，还加入了我自己读的时候的理解。无论理解的有没有到位，但这个记录过程就把自己读书的那时那刻的所思所想、肤浅的高深的都给摆在纸上，不藏着掖着，真实的面对看见自己在某一个时刻的思维的形状。</p>
<p>这儿记录一下印象深刻的问题：</p>
<blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Time_to_first_fix" target="_blank" rel="external">TTFF</a>: time to first fix. 这个书上没有，但干这个的人都知道，这就没办法，自己专业也不是这个。一查询，也不是啥高深的，就是gps第一次定位的时间，根据场景不同，分为cold start, warm start, hot start。</li>
<li>所谓cold start:就是卫星完全没有任何prior information. 需要一个一个的去捕获所有卫星，但捕获的时候，不是brute force.而是一旦捕获到一颗，就根据这颗卫星的信息，可知附近的卫星的位置，可以把这个信息用来帮助加快捕获其他卫星，而不用真正的全盲捕！这个思路也没什么高级的，但却是cold start最理想的方式，只有通过思考细节才能想到这个方法，也就是一颗卫星一颗卫星的来看，站在cold start的角度想。</li>
<li>warm start: 有prior data,例如：100km范围以内，20s时间以内等<ul>
<li>hot start： 就是当前的信息更清楚，比如:知道目前的位置坐标，目前的时间。</li>
</ul>
</li>
</ul>
</blockquote>
<p>另外还考了c语言的一些基础。发现自己好久不用不看c，很多基本问题都似是而非。看来，面试的时候，基础还是很重要，不能给别人感觉自己基础不扎实的感觉啊，因此，最近把c看了，然后把c++书再看看，尤其是自己不熟悉的章节，比如：继承。</p>
<p>另外一点，自己看面试，以为需要花很多时间把一些关键的问题搞得很透彻，而对一些不重要的问题很不上心，因为这些细枝末节很无趣没有挑战，而面试官却不这么看，他们没耐心去考察你是否透彻，他们主要关心你基础如何，能不能马上干活。所以，一个问题，涉及两个对象，两个对象对同一个问题理解就不一样。不一样不是因为两者看到的问题是两个问题。恰恰相反，两者看到的正是一个问题，只不过是一个问题的两个方面，每个人都习惯的从自己的立场去看这个问题，觉得理所当然。由于面试官是强势的一方，从而从面试官角度思考就显得重要了。以后，我应该做的是换个角度来看同一个问题，问题没变，是我调整了看他的角度，只是需要调整角度，问题就容易得到解决了。你看，观察多么重要！只要观察认可问题所在，而解决问题的方法就自然显露出来了！</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 基础很重要 </tag>
            
            <tag> 不同的视角 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
